/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IGBMInterface extends ethers.utils.Interface {
  functions: {
    "batchClaim(uint256[])": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "erc20Currency()": FunctionFragment;
    "getAuctionBidDecimals(uint256)": FunctionFragment;
    "getAuctionBidMultiplier(uint256)": FunctionFragment;
    "getAuctionDebt(uint256)": FunctionFragment;
    "getAuctionDueIncentives(uint256)": FunctionFragment;
    "getAuctionEndTime(uint256)": FunctionFragment;
    "getAuctionHammerTimeDuration(uint256)": FunctionFragment;
    "getAuctionHighestBid(uint256)": FunctionFragment;
    "getAuctionHighestBidder(uint256)": FunctionFragment;
    "getAuctionID(address,uint256)": FunctionFragment;
    "getAuctionIncMax(uint256)": FunctionFragment;
    "getAuctionIncMin(uint256)": FunctionFragment;
    "getAuctionStartTime(uint256)": FunctionFragment;
    "getAuctionStepMin(uint256)": FunctionFragment;
    "getContractAddress(uint256)": FunctionFragment;
    "getTokenId(uint256)": FunctionFragment;
    "getTokenKind(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchClaim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "erc20Currency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBidDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBidMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDueIncentives",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionHammerTimeDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionHighestBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionHighestBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionID",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionIncMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionIncMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStepMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenKind",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "batchClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Currency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBidDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBidMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDueIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionHammerTimeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionIncMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionIncMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStepMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenKind",
    data: BytesLike
  ): Result;

  events: {
    "Auction_BidPlaced(uint256,address,uint256)": EventFragment;
    "Auction_BidRemoved(uint256,address,uint256)": EventFragment;
    "Auction_EndTimeUpdated(uint256,uint256)": EventFragment;
    "Auction_IncentivePaid(uint256,address,uint256)": EventFragment;
    "Auction_Initialized(uint256,uint256,uint256,address,bytes4)": EventFragment;
    "Auction_ItemClaimed(uint256)": EventFragment;
    "Auction_StartTimeUpdated(uint256,uint256)": EventFragment;
    "Contract_BiddingAllowed(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Auction_BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_BidRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_EndTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_IncentivePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_ItemClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_StartTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contract_BiddingAllowed"): EventFragment;
}

export type Auction_BidPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _auctionID: BigNumber;
    _bidder: string;
    _bidAmount: BigNumber;
  }
>;

export type Auction_BidRemovedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _auctionID: BigNumber;
    _bidder: string;
    _bidAmount: BigNumber;
  }
>;

export type Auction_EndTimeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _auctionID: BigNumber; _endTime: BigNumber }
>;

export type Auction_IncentivePaidEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _auctionID: BigNumber;
    _earner: string;
    _incentiveAmount: BigNumber;
  }
>;

export type Auction_InitializedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string] & {
    _auctionID: BigNumber;
    _tokenID: BigNumber;
    _tokenIndex: BigNumber;
    _contractAddress: string;
    _tokenKind: string;
  }
>;

export type Auction_ItemClaimedEvent = TypedEvent<
  [BigNumber] & { _auctionID: BigNumber }
>;

export type Auction_StartTimeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { _auctionID: BigNumber; _startTime: BigNumber }
>;

export type Contract_BiddingAllowedEvent = TypedEvent<
  [string, boolean] & { _contract: string; _biddingAllowed: boolean }
>;

export class IGBM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGBMInterface;

  functions: {
    batchClaim(
      _auctionIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20Currency(overrides?: CallOverrides): Promise<[string]>;

    getAuctionBidDecimals(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionBidMultiplier(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionDebt(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionDueIncentives(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionEndTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionHammerTimeDuration(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionHighestBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionHighestBidder(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAuctionID(address,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAuctionID(address,uint256,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionIncMax(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionIncMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionStartTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionStepMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getContractAddress(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenId(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenKind(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  batchClaim(
    _auctionIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20Currency(overrides?: CallOverrides): Promise<string>;

  getAuctionBidDecimals(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionBidMultiplier(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionDebt(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionDueIncentives(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionEndTime(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionHammerTimeDuration(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionHighestBid(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionHighestBidder(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAuctionID(address,uint256)"(
    _contract: string,
    _tokenID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAuctionID(address,uint256,uint256)"(
    _contract: string,
    _tokenID: BigNumberish,
    _tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionIncMax(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionIncMin(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionStartTime(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionStepMin(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getContractAddress(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenId(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenKind(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    batchClaim(
      _auctionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(_auctionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    erc20Currency(overrides?: CallOverrides): Promise<string>;

    getAuctionBidDecimals(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionBidMultiplier(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDebt(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDueIncentives(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionEndTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHammerTimeDuration(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBidder(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAuctionID(address,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionID(address,uint256,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMax(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStartTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStepMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddress(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenId(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenKind(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Auction_BidPlaced(uint256,address,uint256)"(
      _auctionID?: BigNumberish | null,
      _bidder?: string | null,
      _bidAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _auctionID: BigNumber; _bidder: string; _bidAmount: BigNumber }
    >;

    Auction_BidPlaced(
      _auctionID?: BigNumberish | null,
      _bidder?: string | null,
      _bidAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _auctionID: BigNumber; _bidder: string; _bidAmount: BigNumber }
    >;

    "Auction_BidRemoved(uint256,address,uint256)"(
      _auctionID?: BigNumberish | null,
      _bidder?: string | null,
      _bidAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _auctionID: BigNumber; _bidder: string; _bidAmount: BigNumber }
    >;

    Auction_BidRemoved(
      _auctionID?: BigNumberish | null,
      _bidder?: string | null,
      _bidAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _auctionID: BigNumber; _bidder: string; _bidAmount: BigNumber }
    >;

    "Auction_EndTimeUpdated(uint256,uint256)"(
      _auctionID?: BigNumberish | null,
      _endTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _auctionID: BigNumber; _endTime: BigNumber }
    >;

    Auction_EndTimeUpdated(
      _auctionID?: BigNumberish | null,
      _endTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _auctionID: BigNumber; _endTime: BigNumber }
    >;

    "Auction_IncentivePaid(uint256,address,uint256)"(
      _auctionID?: BigNumberish | null,
      _earner?: string | null,
      _incentiveAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _auctionID: BigNumber; _earner: string; _incentiveAmount: BigNumber }
    >;

    Auction_IncentivePaid(
      _auctionID?: BigNumberish | null,
      _earner?: string | null,
      _incentiveAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _auctionID: BigNumber; _earner: string; _incentiveAmount: BigNumber }
    >;

    "Auction_Initialized(uint256,uint256,uint256,address,bytes4)"(
      _auctionID?: BigNumberish | null,
      _tokenID?: BigNumberish | null,
      _tokenIndex?: BigNumberish | null,
      _contractAddress?: null,
      _tokenKind?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        _auctionID: BigNumber;
        _tokenID: BigNumber;
        _tokenIndex: BigNumber;
        _contractAddress: string;
        _tokenKind: string;
      }
    >;

    Auction_Initialized(
      _auctionID?: BigNumberish | null,
      _tokenID?: BigNumberish | null,
      _tokenIndex?: BigNumberish | null,
      _contractAddress?: null,
      _tokenKind?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        _auctionID: BigNumber;
        _tokenID: BigNumber;
        _tokenIndex: BigNumber;
        _contractAddress: string;
        _tokenKind: string;
      }
    >;

    "Auction_ItemClaimed(uint256)"(
      _auctionID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _auctionID: BigNumber }>;

    Auction_ItemClaimed(
      _auctionID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _auctionID: BigNumber }>;

    "Auction_StartTimeUpdated(uint256,uint256)"(
      _auctionID?: BigNumberish | null,
      _startTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _auctionID: BigNumber; _startTime: BigNumber }
    >;

    Auction_StartTimeUpdated(
      _auctionID?: BigNumberish | null,
      _startTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _auctionID: BigNumber; _startTime: BigNumber }
    >;

    "Contract_BiddingAllowed(address,bool)"(
      _contract?: string | null,
      _biddingAllowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { _contract: string; _biddingAllowed: boolean }
    >;

    Contract_BiddingAllowed(
      _contract?: string | null,
      _biddingAllowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { _contract: string; _biddingAllowed: boolean }
    >;
  };

  estimateGas: {
    batchClaim(
      _auctionIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20Currency(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionBidDecimals(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionBidMultiplier(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDebt(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDueIncentives(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionEndTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHammerTimeDuration(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBidder(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionID(address,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionID(address,uint256,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMax(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStartTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStepMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddress(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenKind(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchClaim(
      _auctionIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20Currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionBidDecimals(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionBidMultiplier(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionDebt(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionDueIncentives(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionEndTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionHammerTimeDuration(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionHighestBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionHighestBidder(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionID(address,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionID(address,uint256,uint256)"(
      _contract: string,
      _tokenID: BigNumberish,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionIncMax(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionIncMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStartTime(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStepMin(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddress(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenKind(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
